From	https://www.clicketyclick.dk/databases/xbase/format/dbf.html#DBF_STRUCT

Xbase Data file (*.dbf)
The data file with suffix DBF is the central table in an Xbase database. All other data files are related to this one file.
The Data File is a mix of binary and ASCII data. Header contains binary data. The records are all in ASCII (except ofcause the binary objects like pictures).

Several sources claim that dBASE clears the header on creation with blanks (20h). But I've seen data in the reserved areas.
Some documents states that deleted records are overwritten by new valid records. My experience is that new records are appended to the data file - not inserted.
A deleted record can only be deleted physically using the PACK command. Even after PACK the deleted record exists after the EOF mark. The file is not truncated in dBASE III (But don't count on it ;-)

Note that this structure is valid for Xbase - and dBASE v. III - 5. Later versions of dBASE has a different layout, like dBASE 7 (see http://www.dbase.com/KnowledgeBase/int/db7_file_fmt.htm



          _______________________  _______
00h /   0| Version number      *1|  ^
         |-----------------------|  |
01h /   1| Date of last update   |  |
02h /   2|      YYMMDD        *21|  |
03h /   3|                    *14|  |
         |-----------------------|  |
04h /   4| Number of records     | Record
05h /   5| in data file          | header
06h /   6| ( 32 bits )        *14|  |
07h /   7|                       |  |
         |-----------------------|  |
08h /   8| Length of header   *14|  |
09h /   9| structure ( 16 bits ) |  |
         |-----------------------|  |
0Ah /  10| Length of each record |  |
0Bh /  11| ( 16 bits )     *2 *14|  |
         |-----------------------|  |
0Ch /  12| ( Reserved )        *3|  |
0Dh /  13|                       |  |
         |-----------------------|  |
0Eh /  14| Incomplete transac.*12|  |
         |-----------------------|  |
0Fh /  15| Encryption flag    *13|  |
         |-----------------------|  |
10h /  16| Free record thread    |  |
11h /  17| (reserved for LAN     |  |
12h /  18|  only )               |  |
13h /  19|                       |  |
         |-----------------------|  |
14h /  20| ( Reserved for        |  |            _        |=======================| ______
         |   multi-user dBASE )  |  |           / 00h /  0| Field name in ASCII   |  ^
         : ( dBASE III+ - )      :  |          /          : (terminated by 00h)   :  |
         :                       :  |         |           |                       |  |
1Bh /  27|                       |  |         |   0Ah / 10|                       |  |
         |-----------------------|  |         |           |-----------------------| For
1Ch /  28| MDX flag (dBASE IV)*14|  |         |   0Bh / 11| Field type (ASCII) *20| each
         |-----------------------|  |         |           |-----------------------| field
1Dh /  29| Language driver     *5|  |        /    0Ch / 12| Field data address    |  |
         |-----------------------|  |       /             |                     *6|  |
1Eh /  30| ( Reserved )          |  |      /              | (in memory !!!)       |  |
1Fh /  31|                     *3|  |     /       0Fh / 15| (dBASE III+)          |  |
         |=======================|__|____/                |-----------------------|  | <-
20h /  32|                       |  |  ^          10h / 16| Field length       *22|  |   |
         |- - - - - - - - - - - -|  |  |                  |-----------------------|  |   | *7
         |                    *19|  |  |          11h / 17| Decimal count      *23|  |   |
         |- - - - - - - - - - - -|  |  Field              |-----------------------|  | <-
         |                       |  | Descriptor  12h / 18| ( Reserved for        |  |
         :. . . . . . . . . . . .:  |  |array     13h / 19|   multi-user dBASE)*18|  |
         :                       :  |  |                  |-----------------------|  |
      n  |                       |__|__v_         14h / 20| Work area ID       *16|  |
         |-----------------------|  |    \                |-----------------------|  |
      n+1| Terminator (0Dh)      |  |     \       15h / 21| ( Reserved for        |  |
         |=======================|  |      \      16h / 22|   multi-user dBASE )  |  |
      m  | Database Container    |  |       \             |-----------------------|  |
         :                    *15:  |        \    17h / 23| Flag for SET FIELDS   |  |
         :                       :  |         |           |-----------------------|  |
    / m+263                      |  |         |   18h / 24| ( Reserved )          |  |
         |=======================|__v_ ___    |           :                       :  |
         :                       :    ^       |           :                       :  |
         :                       :    |       |           :                       :  |
         :                       :    |       |   1Eh / 30|                       |  |
         | Record structure      |    |       |           |-----------------------|  |
         |                       |    |        \  1Fh / 31| Index field flag    *8|  |
         |                       |    |         \_        |=======================| _v_____
         |                       | Records
         |-----------------------|    |
         |                       |    |          _        |=======================| _______
         |                       |    |         / 00h /  0| Record deleted flag *9|  ^
         |                       |    |        /          |-----------------------|  |
         |                       |    |       /           | Data               *10|  One
         |                       |    |      /            : (ASCII)            *17: record
         |                       |____|_____/             |                       |  |
         :                       :    |                   |                       | _v_____
         :                       :____|_____              |=======================|
         :                       :    |
         |                       |    |
         |                       |    |
         |                       |    |
         |                       |    |
         |                       |    |
         |=======================|    |
         |__End_of_File__________| ___v____  End of file ( 1Ah )  *11

1.  Also called signature.
    Value 	Bit mask 	Description
    02h 	00000010 	FoxBase
    03h 	00000011 	File without DBT
    04h 	00000100 	dBASE IV w/o memo file
    05h 	00000101 	dBASE V w/o memo file
    07h 	00000111 	VISUAL OBJECTS (first 1.0 versions) for the Dbase III files w/o memo file
    30h 	00110000 	Visual FoxPro
    30h 	00110000 	Visual FoxPro w. DBC
    31h 	00110001 	Visual FoxPro w. AutoIncrement field
    43h 	01000011 	.dbv memo var size (Flagship)
    7Bh 	01111011 	dBASE IV with memo
    83h 	10000011 	File with DBT
    83h 	10000011 	dBASE III+ with memo file
    87h 	10000111 	VISUAL OBJECTS (first 1.0 versions) for the Dbase III files (NTX clipper driver) with memo file
    8Bh 	10001011 	dBASE IV w. memo
    8Eh 	10001110 	dBASE IV w. SQL table
    B3h 	10110011 	.dbv and .dbt memo (Flagship)
    E5h 	11100101 	Clipper SIX driver w. SMT memo file.

    Note! Clipper SIX driver sets lowest 3 bytes to 110 in descriptor of crypted databases. So, 3->6, 83h->86h, F5->F6, E5->E6 etc.
    F5h 	11110101 	FoxPro w. memo file
    FBh 	11111011 	FoxPro ???
    	dBASE IV bit flags:
    Bit 	Description
    0-2 	Version no. i.e. 0-7
    3 	Presence of memo file
    4-6 	Presence of SQL table
    7 	DBT flag

    MSSSFVVV

    M 	dBASE III memo file
    S 	SQL mask
    F 	Memo field flag
    V 	Version
2.  Sum of lengths of all fields + 1 (deletion flag)
3.  Filled with 00h. (dBASE IV)
4.  Production index / Multiple index file
    (dBASE IV)
    Value 	Description
    01h 	MDX file present
    00h 	no MDX file (index upon demand).
    	(FoxBase)
    Value 	Description
    01h 	CDX compound index file present,
    00h 	no CDX file.
    	(Visual FoxPro)
    Value 	Description
    02h 	With memo
    04h 	Database Container (DBC)
    07h 	DBC (incl. memo & indexes)
5.  (Foxpro) Code page: These values follow the DOS / Windows Code Page values.
    Value 	Description 	Code page
    01h		DOS USA	code page 437
    02h		DOS Multilingual	code page 850
    03h		Windows ANSI	code page 1252
    04h		Standard Macintosh
    64h		EE MS-DOS	code page 852
    65h		Nordic MS-DOS	code page 865
    66h		Russian MS-DOS	code page 866
    67h		Icelandic MS-DOS
    68h		Kamenicky (Czech) MS-DOS
    69h		Mazovia (Polish) MS-DOS
    6Ah		Greek MS-DOS (437G)
    6Bh		Turkish MS-DOS
    96h		Russian Macintosh
    97h		Eastern European Macintosh
    98h		Greek Macintosh
    C8h		Windows EE	code page 1250
    C9h		Russian Windows
    CAh		Turkish Windows
    CBh		Greek Windows
6.  Field data address
    Note that this field has two very different interpretations.

    Version 	Offset 	Description
    dBASE 	12-15 	Address in memory.
    FoxPro 	12-13 	Offset of field from beginning of record.

    The field addresss is irellevant for other applications.
7.  Field length for non-numerical fields. (FoxPro, Clipper)
    Byte 16 is normally field length (0-255) and byte 17 represents the high byte for field length (256-65535).
8.  Index field flag (dBASE IV):
    Value 	Description
    00h 	No key for this field (ignored)
    01h 	Key exists for this field (in MDX)
9.  Deleted flag:
    Value 	Description
    2Ah (*) 	Record is deleted
    20h (blank) 	Record is valid
10. There are no field separators for record terminators.
11. End-of-file
    dBASE II regards any End-of-File 1Ah value as the end of the file. dBASE III regard an End-of-File as an ordinary character, however it appends an extra End-of-File character at the physical end of the file.
    If the file is packed the physical size of the file may be larger than the logical i.e. there may be garbage after the EOF mark.
12. (dBASE IV) Incomplete transaction:
    Value 	Description
    00h 	Transaction ended (or rolled back)
    01h 	Transaction started
13. Encryption flag (dBASE IV):
    Be very careful NOT to modify this flag!
    This is the only indication that the content is enctrypted.

    Value 	Description
    00h 	Not encrypted
    01h 	Data encrypted
14. Stored at binary (Little endian). Unsigned.
15. Database Container (DBC) 263 bytes for backlist. (Visual FoxPro)
    Included in header structure.
16. Work area ID is 01h in all dBASE III files
17. An empty memo field has a reference filled with 10 blanks.
18. Field Flags (FoxPro/FoxBase):
    Value 	Description
    01h 	System column (not visible to user)
    02h 	Column can store null values
    04h 	Binary column (for CHAR and MEMO only)
19. Max 128 fields
20. ?? See Data types
21. Date in header is without century YYMMDD and date in records are with century YYYYMMDD. Valid interval is 00h - FFh. Add base year 1900 and you'll have the interval 1900 - 2155.
22. Field length Max = 255. Valid types (See Data types
23. Decimal count Numeric <= 15 

Xbase: Data types
Data files (*.dbf) contains a header with information on the data structure AND the record themselves. The data field is predefined as carrying data of a specific type ( Character, Numbers, Logicals, Dates, Memo).
Each data type has its limitations: ??
Code 	Type 	Length 	Description
C 	Character 	< 254 	ASCII text < 254 characters long in dBASE. Character fields can be up to 32 KB long (in Clipper and FoxPro) using decimal count as high byte in field length. It's possible to use up to 64KB long fields by reading length as unsigned.

                                Only fields <= 100 characters can be indexed.
N 	Number 	        <18 	ASCII text up till 18 characters long (include sign and decimal point). Valid characters: "0" - "9" and "-". Number fields can be up to 20 characters long in FoxPro and Clipper. 
L 	Logical 	1 	Boolean/byte (8 bit) Legal values: 
 
                                ? 	Not initialised (default) 	 
                                Y,y 	Yes
                                N,n 	No
                                F,f 	False
                                T,t 	True
                                Logical fields are always displayed using T/F/?. Some sources claims that space (ASCII 20h) is valid for not initialised. Space may occur, but is not defined. 	 
D 	Date 	        8 	Date in format YYYYMMDD. A date like 0000-00- 00 is *NOT* valid. 
M 	Memo 	        10 	Pointer to ASCII text field in memo file 10 digits representing a pointer to a DBT block (default is blanks). 
F 	Floating point 	20 	(dBASE IV and later, FoxPro, Clipper) 20 digits 
N/A 	Character name variable 	< 254 	1-254 characters (64 KB in FoxBase and Clipper) 
B 	Binary 	        ?? 	(dBASE V) Like Memo fields, but not for text processing. 

                                (FoxPro/FoxBase) Double integer *NOT* a memo field
G 	General 	?? 	(dBASE V: like Memo) OLE Objects in MS Windows versions 
P 	Picture 	?? 	(FoxPro) Like Memo fields, but not for text processing. 
Y 	Currency 	?? 	(FoxPro)
T 	DateTime 	8 bytes (two longs) 	(FoxPro) The first 4 bytes are a 32-bit little-endian integer representation of the Julian date, where Oct. 15, 1582 = 2299161 per www.nr.com/julian.html The last 4 bytes are a 32-bit little-endian integer time of day represented as milliseconds since midnight.
I 	Integer 	4 byte little endian integer 	(FoxPro)
V 	VariField 	2-10 bytes 	There are weakly-typed and strongly-typed VariFields.
Weakly-typed VariFields allow to store a portion of any character data in the .DBF field itself, with any additional amount, if any, being automatically stored in the MEMO file. This substantially reduces the amount of disk space required to store the data. This is sort of a cross between using a CHARACTER field and a MEMO field at the same time.
A 6 byte pointer is maintained at the end of the weakly-typed "V" field entry within the DBF file. When you define the field width for a new database file, keep in mind that weakly-typed "V" fields require this additional 6 bytes at the end.
Strongly-typed VariFields store DATE values in only three bytes, instead of eight, and LONG INTEGER values (up to ~2G) in only 4 bytes. Any "V" field defined with 4 bytes is automatically considered a strongly-typed integer, and "V" fields defined with 3 bytes are automatically considered strongly-typed DATE values. No additional space is required (6-byte pointer) for strongly typed VariFields.

FlagShip has additional types

V 10   Variable  Variable, bin/asc data in .dbv      (.dbf type = 0xB3)
                 4bytes bin= start pos in memo
                 4bytes bin= block size
                 1byte     = subtype
                 1byte     = reserved (0x1a)
                 10spaces if no entry in .dbv

2 2    short int binary int max +/- 32767       (.dbf type = 0xB3)
4 4    long int  binary int max +/- 2147483647  (.dbf type = 0xB3)
8 8    double    binary signed double IEEE      (.dbf type = 0xB3)

X 	Variant (X) for compatibility with SQL-s (i.e. varChar). 		(CLIP)
@ 	Timestamp. 	8 bytes (two longs) 	First long repecents date and second long time. Date is the number of days since January 1st, 4713 BC. Time is hours * 3600000L + minutes * 60000L + seconds * 1000L.
O 	Double 	8 bytes 	(no conversion)
+ 	Autoincrement 	long 	(no conversion)
Index files (*.ndx) are sorted references to fields in the data files. There might be more than one index for each data file.

dBASE III Memo files are primitive 512 byte hunks of ASCII text data creating a way for text fields to exceed the 255 characters barrier of ordinary text fields. Other versions may store up till 64 KB of text in a fixed sized text field. Larger amounts of text (and binary data) is still stored in memo-like files. The size off the blocks can be user defined while creating the memo file (see byte 4-7 of the memo file structure).
	Note that memo fields are not fully supported by a majority of Xbase utilities (incl. dBASE III). You can't export/import records with memo fields (They are ignored in delimited exports in dBASE III). 
To avoid problems with the priority of fields, put memo fields at the very end of the record. 

